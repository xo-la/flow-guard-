import cv2
import torch
import numpy as np
import os
from tkinter import Tk, Label, Button, Entry, filedialog, Text, messagebox, Toplevel
from fpdf import FPDF

# Load YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Global variables
log_file_name = "detection_log.txt"
fps = 30
output_width = 800
output_height = 600

def detect_objects(frame, frame_index):
    """
    Detect objects in the frame and draw bounding boxes.

    Args:
        frame (ndarray): Input video frame.
        frame_index (int): Index of the current frame.

    Returns:
        frame (ndarray): Frame with bounding boxes.
        detection_summary (dict): Dictionary of detected object counts.
    """
    original_h, original_w = frame.shape[:2]
    resized_frame = cv2.resize(frame, (640, 640), interpolation=cv2.INTER_LINEAR)

    # Perform detection
    results = model(resized_frame)
    detections = results.xyxy[0].cpu().numpy()  # [x1, y1, x2, y2, conf, class_id]

    detection_summary = {}

    for detection in detections:
        x1, y1, x2, y2, confidence, class_id = detection
        x1 = int(x1 * original_w / 640)
        y1 = int(y1 * original_h / 640)
        x2 = int(x2 * original_w / 640)
        y2 = int(y2 * original_h / 640)

        class_name = model.names[int(class_id)]
        if class_name not in detection_summary:
            detection_summary[class_name] = 0
        detection_summary[class_name] += 1

        label = f"{class_name}: {confidence:.2f}"
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    timestamp = frame_index / fps
    timestamp_str = f"{int(timestamp // 60)}:{int(timestamp % 60):02d}"

    with open(log_file_name, "a") as log_file:
        for class_name, count in detection_summary.items():
            log_file.write(f"{frame_index}, {timestamp_str}, {class_name}, {count}\n")

    return frame

def process_video(video_path):
    global fps
    cap = cv2.VideoCapture(video_path)
    fps = cap.get(cv2.CAP_PROP_FPS)

    frame_index = 0
    with open(log_file_name, "w") as log_file:
        log_file.write("Frame, Timestamp, Object, Count\n")

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        output_frame = detect_objects(frame, frame_index)
        display_frame = cv2.resize(output_frame, (output_width, output_height), interpolation=cv2.INTER_LINEAR)
        cv2.imshow("Detection", display_frame)

        frame_index += 1
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
    messagebox.showinfo("Processing Complete", "Video processing completed. Detection log saved.")

def capture_realtime():
    process_video(0)

def upload_video():
    video_path = filedialog.askopenfilename(filetypes=[("Video Files", "*.mp4 *.avi *.mkv")])
    if video_path:
        process_video(video_path)

def view_log():
    log_window = Toplevel(root)
    log_window.title("Detection Log")
    log_text = Text(log_window, wrap="word", width=80, height=30)
    log_text.pack(expand=True, fill="both")

    with open(log_file_name, "r") as log_file:
        log_text.insert("1.0", log_file.read())

def extract_to_pdf():
    start_time = start_time_entry.get()
    end_time = end_time_entry.get()

    try:
        start_seconds = int(start_time.split(":")[0]) * 60 + int(start_time.split(":")[1])
        end_seconds = int(end_time.split(":")[0]) * 60 + int(end_time.split(":")[1])
    except ValueError:
        messagebox.showerror("Invalid Time Format", "Please enter time in MM:SS format.")
        return

    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "Detection Log", ln=True, align="C")

    with open(log_file_name, "r") as log_file:
        lines = log_file.readlines()
        pdf.set_font("Arial", size=10)
        for line in lines:
            if line.startswith("Frame"):
                continue
            frame, timestamp, obj, count = line.strip().split(", ")
            current_seconds = int(timestamp.split(":")[0]) * 60 + int(timestamp.split(":")[1])
            if start_seconds <= current_seconds <= end_seconds:
                pdf.cell(0, 10, f"Frame: {frame}, Time: {timestamp}, Object: {obj}, Count: {count}", ln=True)

    pdf_save_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
    if pdf_save_path:
        pdf.output(pdf_save_path)
        messagebox.showinfo("PDF Saved", f"PDF saved to {pdf_save_path}")

# Tkinter GUI
root = Tk()
root.title("Flow Guardv1.3")

Label(root, text="Flow Guard", font=("Arial", 16)).pack(pady=10)

Button(root, text="Upload Video", command=upload_video, width=20).pack(pady=5)
Button(root, text="Capture Real-Time Video", command=capture_realtime, width=20).pack(pady=5)
Button(root, text="View Full Log", command=view_log, width=20).pack(pady=5)

Label(root, text="Extract Log Section to PDF", font=("Arial", 12)).pack(pady=10)
Label(root, text="Start Time (MM:SS):").pack()
start_time_entry = Entry(root)
start_time_entry.pack()
Label(root, text="End Time (MM:SS):").pack()
end_time_entry = Entry(root)
end_time_entry.pack()

Button(root, text="Extract to PDF", command=extract_to_pdf, width=20).pack(pady=10)

root.mainloop()
